on:
  workflow_call:
    inputs:
      e2e_tests_target_url_frontend:
        type: string
        required:  false # TODO Make this true when all repos updated
      e2e_tests_target_url_authenticator:
        type: string
        required:  false # TODO Make this true when all repos updated
      e2e_tests_target_url_form_runner:
        type: string
        required:  false # TODO Make this true when all repos updated
      e2e_tests_target_url_assessment:
        type: string
        required:  false # TODO Make this true when all repos updated
      perf_test_target_url_application_store:
        type: string
        required: false
      perf_test_target_url_fund_store:
        type: string
        required: false
      perf_test_target_url_assessment_store:
        type: string
        required: false
      users:
        required: false
        default: 2
        type: string
      spawn-rate:
        required: false
        default: 1
        type: string
      run-time:
        required: false
        default: 10s
        type: string
      run_performance_tests:
        required: false
        default: false
        type: boolean
      run_e2e_tests_application:
        required: false
        default: true
        type: boolean
      run_e2e_tests_assessment:
        required: false
        default: true
        type: boolean
      run_e2e_tests_python:
        required: false
        default: true
        type: boolean
      run_accessibility_tests:
        required: false
        default: false
        type: boolean
      env_name:
        required: true
        type: string
    secrets:
      FSD_GH_APP_ID:
        required: true
      FSD_GH_APP_KEY:
        required: true
      FS_BASIC_AUTH_USERNAME:
        required: true
      FS_BASIC_AUTH_PASSWORD:
        required: true
      AWS_ACCOUNT:
        required: true

jobs:
  run_application_e2e_test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    environment: ${{ inputs.env_name }}
    if: ${{ inputs.run_e2e_tests_application == true}}
    defaults:
      run:
        working-directory: ./funding-service-design-e2e-checks
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1.6.4
        with:
          app-id: ${{ secrets.FSD_GH_APP_ID }}
          private-key: ${{ secrets.FSD_GH_APP_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: "funding-service-design-e2e-checks"

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/GithubCopilotDeploy
          role-session-name: "${{ inputs.app_name }}_${{ inputs.environemnt }}_copilot_${{ steps.currentdatetime.outputs.datetime }}"
          aws-region: eu-west-2

      - name: Checkout E2E tests
        uses: actions/checkout@v4.1.1
        with:
          repository: communitiesuk/funding-service-design-e2e-checks
          path: ./funding-service-design-e2e-checks
          token: ${{ steps.generate_token.outputs.token }}

      - name: 'Set unique id'
        id: unique_id
        run: |
          echo "unique_id=$(date +%s)" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with:
          node-version: 21
      - name: Install dependencies
        run: npm ci
      - name: Run E2E Tests Application For All Funds
        run: npx wdio run ./wdio.conf_headless.js
        env:
          EXCLUDE_ASSESSMENT: true
          EXCLUDE_APPLICATION: false
          E2E_TEST_ENVIRONMENT: ${{ inputs.env_name }}
      - name: Upload E2E Test Report Application
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report-application-${{inputs.env_name}}-${{ steps.unique_id.outputs.unique_id }}
          path: ./funding-service-design-e2e-checks/results
          retention-days: 5
  run_python_e2e_test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    environment: ${{ inputs.env_name }}
    if: ${{ inputs.run_e2e_tests_python == true}}
    defaults:
      run:
        working-directory: ./funding-service-design-e2e-checks
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1.6.4
        with:
          app-id: ${{ secrets.FSD_GH_APP_ID }}
          private-key: ${{ secrets.FSD_GH_APP_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: "funding-service-design-e2e-checks"

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/GithubCopilotDeploy
          role-session-name: "${{ inputs.app_name }}_${{ inputs.environemnt }}_copilot_${{ steps.currentdatetime.outputs.datetime }}"
          aws-region: eu-west-2

      - name: Checkout E2E tests
        uses: actions/checkout@v4.1.1
        with:
          repository: communitiesuk/funding-service-design-e2e-checks
          path: ./funding-service-design-e2e-checks
          token: ${{ steps.generate_token.outputs.token }}

      - name: 'Set unique id'
        id: unique_id
        run: |
          echo "unique_id=$(date +%s)" >> $GITHUB_OUTPUT

  run_assessment_e2e_test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
    environment: ${{ inputs.env_name }}
    if: ${{ inputs.run_e2e_tests_assessment == true}}
    defaults:
      run:
        working-directory: ./funding-service-design-e2e-checks
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1.6.4
        with:
          app-id: ${{ secrets.FSD_GH_APP_ID }}
          private-key: ${{ secrets.FSD_GH_APP_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: "funding-service-design-e2e-checks"

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/GithubCopilotDeploy
          role-session-name: "${{ inputs.app_name }}_${{ inputs.environemnt }}_copilot_${{ steps.currentdatetime.outputs.datetime }}"
          aws-region: eu-west-2

      - name: Checkout E2E tests
        uses: actions/checkout@v4.1.1
        with:
          repository: communitiesuk/funding-service-design-e2e-checks
          path: ./funding-service-design-e2e-checks
          token: ${{ steps.generate_token.outputs.token }}
      - name: 'Set unique id'
        id: unique_id
        run: |
          echo "unique_id=$(date +%s)" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with:
          node-version: 21
      - name: Install dependencies
        run: npm ci
      - name: Run E2E Tests Assessment For All Funds
        run:  npx wdio run wdio.conf_headless.js
        env:
          EXCLUDE_ASSESSMENT: false
          EXCLUDE_APPLICATION: true
          E2E_TEST_ENVIRONMENT: ${{ inputs.env_name }}
      - name: Upload Assessment E2E Test Report
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report-assessment-${{inputs.env_name}}-${{ steps.unique_id.outputs.unique_id }}
          path: ./funding-service-design-e2e-checks/results
          retention-days: 5

  run_performance_tests:
    runs-on: ubuntu-latest
    if: ${{ inputs.run_performance_tests == true}}
    defaults:
      run:
        working-directory: ./funding-service-design-performance-tests
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1.6.4
        with:
          app-id: ${{ secrets.FSD_GH_APP_ID }}
          private-key: ${{ secrets.FSD_GH_APP_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: "funding-service-design-performance-tests"

      - name: checkout performance tests repo
        uses: actions/checkout@main
        with:
          repository: communitiesuk/funding-service-design-performance-tests
          path: ./funding-service-design-performance-tests
          token: ${{ steps.generate_token.outputs.token }}
      - name: 'Set unique id'
        id: unique_id
        run: |
          echo "unique_id=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.x
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - name: install dependencies
        run: uv sync
      - name: Run performance tests
        env:
          TARGET_URL_FUND_STORE: https://fsd-fund-store:8080
          TARGET_URL_APPLICATION_STORE: http://fsd-application-store:8080
          TARGET_URL_ASSESSMENT_STORE: https://fsd-assessment-store:8080
        run: uv run python -m locust --users ${{inputs.users}} --spawn-rate ${{inputs.spawn-rate}} --run-time ${{inputs.run-time}}
      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-report-${{inputs.env_name}}-${{ steps.unique_id.outputs.unique_id }}
          path: ./funding-service-design-performance-tests/locust_html_report.html
          retention-days: 5


# Commented out as there aren't any shared accessibility tests

  # run_accessibility_tests:
  #   if: ${{ inputs.run_accessibility_tests == true}}
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./funding-service-design-performance-tests
  #   steps:
  #     - name: checkout performance tests repo
  #       uses: actions/checkout@main
  #       with:
  #         repository: communitiesuk/funding-service-design-performance-tests
  #         path: ./funding-service-design-performance-tests
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.10.x
  #     - name: create python env
  #       run: pwd & python -m venv .venv
  #     - name: install dependencies
  #       run: pwd & source .venv/bin/activate && python -m pip install --upgrade pip && pip install -r requirements.txt
  #     - name: Install Chromium
  #       uses: browser-actions/setup-chrome@latest
  #     - name: setup Chromedriver
  #       uses: nanasess/setup-chromedriver@v1
  #       with:
  #       # Optional: do not specify to match Chrome's version
  #         chromedriver-version: '88.0.4324.96'
  #     - name: Run Accessability tests
  #       # Runs only the accessibility tests once a dev deployment has been made.
  #       run: pwd && source .venv/bin/activate && python -m pip install pytest pytest-selenium && python -m pytest -m "accessibility"
  #     - name: 'Upload Accessibility Testing reports'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: accessibility-test-report
  #         path: /home/runner/work/funding-service-design-frontend/funding-service-design-frontend/axe_reports/*.html
  #         retention-days: 5
