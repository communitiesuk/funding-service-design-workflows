name: Use Paketo to package and build python application

permissions:
  packages: write

on:
  workflow_call:
    inputs:
      assets_required:
        type: boolean
        default: false
      version_to_build:
        type: string
        required: true
      application:
        type: string
        required: true
      owner:
        type: string
        required: true
      use_uv:
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  DOCKER_IMAGE: ${{ inputs.application }}

jobs:
  paketo_build:
    runs-on: ubuntu-latest
    name: Packaging and building the application
    steps:
      - uses: buildpacks/github-actions/setup-pack@v5.0.0
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        if: ${{inputs.assets_required == true}}
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.x
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install uv
        if: ${{inputs.use_uv == true}}
        uses: astral-sh/setup-uv@v3

      - name: Export requirements.txt
        if: ${{inputs.use_uv == true}}
        run: uv export --format requirements-txt --no-hashes > requirements.txt

      - name: install dependencies
        if: ${{inputs.assets_required == true && inputs.use_uv == false}}
        run: python -m pip install --upgrade pip && pip install -r requirements.txt

      - name: build static assets (if frontend)
        if: ${{inputs.assets_required == true}}
        env:
          USE_UV: ${{ inputs.use_uv }}
        run: |
          if "$USE_UV" == "true" ]; then
            uv run python build.py
          else
            python build.py
          fi

      - name: Build and publish app image
        run: |
          IMAGE_ID=${{ env.REGISTRY }}/${{ inputs.owner }}/${{ env.DOCKER_IMAGE }}
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=${{ inputs.version_to_build }}
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          pack build $IMAGE_ID:$VERSION --builder paketobuildpacks/builder-jammy-full --cache-image ${{ env.REGISTRY }}/${{ inputs.owner }}/${{ env.DOCKER_IMAGE }}/buildpack-packeto-cache-image --publish
