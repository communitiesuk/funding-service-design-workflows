name: Use Paketo to package and build python application

permissions:
  packages: write

on:
  workflow_call:
    inputs:
      assets_required:
        type: boolean
        default: false
      version_to_build:
        type: string
        required: true
      application:
        type: string
        required: true
      owner:
        type: string
        required: true

env:
  REGISTRY: ghcr.io
  DOCKER_IMAGE: ${{ inputs.application }}

jobs:
  paketo_build:
    runs-on: ubuntu-latest
    name: Packaging and building the application
    steps:
      - uses: buildpacks/github-actions/setup-pack@v5.0.0
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        if: ${{inputs.assets_required == true}}
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.x
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: create python env
        if: ${{inputs.assets_required == true}}
        run: python -m venv .venv

      - name: install dependencies
        if: ${{inputs.assets_required == true}}
        run: source .venv/bin/activate && python -m pip install --upgrade pip && pip install -r requirements.txt

      - name: build static assets (if frontend)
        if: ${{inputs.assets_required == true}}
        run: source .venv/bin/activate && python build.py

      - name: create the app
        if: ${{inputs.assets_required == true}}
        run: source .venv/bin/activate && python create_assets.py

      - name: Ensure files are created
        if: ${{inputs.assets_required == true}}
        run: ls -lah app/static/

      - name: Build and publish app image
        run: "pack build ${{ env.DOCKER_IMAGE }} --builder paketobuildpacks/builder-jammy-base"

      - name: Push image
        run: |
          IMAGE_ID=${{ env.REGISTRY }}/${{ inputs.owner }}/${{ env.DOCKER_IMAGE }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=${{ inputs.version_to_build }}

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag ${{ env.DOCKER_IMAGE }} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
