name: Use Paketo to package and build python application

permissions:
  packages: write

on:
  workflow_call:
    inputs:
      assets_required:
        type: boolean
        default: false
      version_to_build:
        type: string
        required: true
      application:
        type: string
        required: true
      owner:
        type: string
        required: true
    outputs:
      image_location:
        description: "A URI pointing to the paketo-built image"
        value: ${{ jobs.paketo_build.outputs.image_location }}

env:
  REGISTRY: ghcr.io
  DOCKER_IMAGE: ${{ inputs.application }}

jobs:
  paketo_build:
    name: Package and build application
    runs-on: ubuntu-latest
    outputs:
      image_location: ${{ steps.build_and_publish.outputs.image_location }}
    steps:
      - uses: buildpacks/github-actions/setup-pack@d82294e03fd6b8e8484cde2ee166788876e366e3 # v5.8.10
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        if: ${{inputs.assets_required == true}}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: 3.10.17

      - name: Install uv
        uses: astral-sh/setup-uv@4db96194c378173c656ce18a155ffc14a9fc4355 # v5
        with:
          enable-cache: true

      - name: install dependencies
        if: ${{inputs.assets_required == true}}
        run: uv sync

      - name: build static assets (if frontend)
        if: ${{inputs.assets_required == true}}
        run: uv run python build.py

      - name: Build and publish app image
        id: build_and_publish
        run: |
          IMAGE_ID=${{ env.REGISTRY }}/${{ inputs.owner }}/${{ env.DOCKER_IMAGE }}
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=${{ inputs.version_to_build }}
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          uv export --format requirements-txt --no-hashes > requirements.txt

          IMAGE_LOCATION="$IMAGE_ID:$VERSION"

          pack build $IMAGE_LOCATION --tag $IMAGE_ID:latest --builder paketobuildpacks/builder-jammy-full --cache-image ${{ env.REGISTRY }}/${{ inputs.owner }}/${{ env.DOCKER_IMAGE }}/buildpack-packeto-cache-image --publish

          echo "image_location=$IMAGE_LOCATION" >> $GITHUB_OUTPUT
