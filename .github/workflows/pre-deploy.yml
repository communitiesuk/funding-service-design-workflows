on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_call:
    inputs:
      assets_required:
        required: false
        default: false
        type: boolean
      postgres_unit_testing:
        required: false
        default: false
        type: boolean
      db_name:
        required: false
        default: "postgres_db"
        type: string

    # not required when not deploying to cf
    secrets:
      GOV_NOTIFY_API_KEY:
        required: false

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:

  testing-unit-aws:
    runs-on: ubuntu-latest
    environment: Dev
    if: ${{ inputs.postgres_unit_testing == false }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.x
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: install dependencies
        run: |
          if [ -f uv.lock ]; then
            uv sync
          else
            python -m pip install --upgrade pip && python -m pip install -r requirements-dev.txt
          fi
      - name: build static assets (if frontend)
        if: ${{inputs.assets_required == true}}
        env:
          FLASK_ENV: "development"
        run: |
          if [ -f uv.lock ]; then
            uv run python build.py
          else
            python build.py
          fi
      - name: run unit tests
        env:
          GOV_NOTIFY_API_KEY: ${{ secrets.GOV_NOTIFY_API_KEY }}
        # pytest -m "not accessibility" runs every test which is not marked
        # accessibility.
        run: |
          if [ -f uv.lock ]; then
            uv run python -m pytest -m "not accessibility" .
          else
            python -m pip install pytest && python -m pytest -m "not accessibility" .
          fi


  testing-unit-postgres-aws:
    runs-on: ubuntu-latest
    environment: Dev
    if: ${{ inputs.postgres_unit_testing == true }}
    services:
      # Label used to access the service containers
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{inputs.db_name}}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.x
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: install dependencies
        run: |
          if [ -f uv.lock ]; then
            uv sync
          else
            python -m pip install --upgrade pip && python -m pip install -r requirements-dev.txt
          fi
      - name: run unit tests
        run: |
          if [ -f uv.lock ]; then
            uv run python -m pytest -m "not accessibility"
          else
            python -m pip install pytest && python -m pytest -m "not accessibility"
          fi
