on:
  # Triggers the workflow on push or pull request events but only for the main branch
  workflow_call:
    inputs:
      assets_required:
        required: false
        default: false
        type: boolean
      postgres_unit_testing:
        required: false
        default: false
        type: boolean
      check_db_migrations:
        required: false
        default: false
        type: boolean
      db_name:
        required: false
        default: "postgres_db"
        type: string

    # not required when not deploying to cf
    secrets:
      GOV_NOTIFY_API_KEY:
        required: false

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:

  testing-unit-aws:
    runs-on: ubuntu-latest
    environment: Dev
    if: ${{ inputs.postgres_unit_testing == false }}
    steps:
      - name: checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5
        with:
          python-version: 3.10.x
      - name: Install uv
        uses: astral-sh/setup-uv@caf0cab7a618c569241d31dcd442f54681755d39 # v3
        with:
          enable-cache: true
      - name: install dependencies
        run: uv sync
      - name: build static assets (if frontend)
        if: ${{inputs.assets_required == true}}
        env:
          FLASK_ENV: "development"
        run: uv run python build.py
      - name: run unit tests
        env:
          GOV_NOTIFY_API_KEY: ${{ secrets.GOV_NOTIFY_API_KEY }}
        # pytest -m "not accessibility" runs every test which is not marked
        # accessibility.
        run: uv run python -m pytest -m "not accessibility" .

  testing-unit-postgres-aws:
    runs-on: ubuntu-latest
    environment: Dev
    if: ${{ inputs.postgres_unit_testing == true }}
    services:
      # Label used to access the service containers
      postgres:
        # Docker Hub image
        image: postgres@sha256:269c12fd770bc805ca0e8c77c7882d14d96be770b6839c8d17b871034361e74a
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ inputs.db_name }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5
        with:
          python-version: 3.10.x
      - name: Install uv
        uses: astral-sh/setup-uv@caf0cab7a618c569241d31dcd442f54681755d39 # v3
        with:
          enable-cache: true
      - name: install dependencies
        run: uv sync
      - name: build static assets (if frontend)
        if: ${{inputs.assets_required == true}}
        env:
          FLASK_ENV: "development"
        run: uv run python build.py
      - name: run unit tests
        run: uv run python -m pytest -m "not accessibility"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/${{ inputs.db_name }}

  check_db:
    name: Check DB migrations
    runs-on: ubuntu-latest
    if: ${{ inputs.check_db_migrations == true }}
    services:
      postgres:
        # Docker Hub image
        image: postgres:16.2@sha256:4aea012537edfad80f98d870a36e6b90b4c09b27be7f4b4759d72db863baeebb
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: pre_award_stores
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@e779db74266a80753577425b0f4ee823649f251d # v3
      with:
        enable-cache: true
    - name: Check DB is up to date
      env:
        FLASK_ENV: unit_test
      run: uv run --frozen flask db upgrade && uv run --frozen flask db check
    - name: Check that .current-alembic-head is pinned
      env:
        FLASK_ENV: unit_test
      run: |
        uv run --frozen flask db current | grep "$(cat ./db/migrations/.current-alembic-head) (head)"
